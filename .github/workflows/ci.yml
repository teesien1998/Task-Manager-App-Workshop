# Step 1: Define The Trigger

name: Backend CI # Define the name of the CI workflow actions

on: # Define the event that triggers the workflow
  push: # Trigger the workflow on a push event
    branches: # Specify the branches to monitor
      - main # Run CI/CD pipeline only when code is pushed to the main branch

# Step 2: Define The Jobs

jobs: # Define the jobs that will run in this workflow
  test: # Job name (test job)
    # Step 3: Define a Job Name and Clone Repository to Runner

    name: Run Tests # Display name for the job
    runs-on: self-hosted # Specify the runner (self-hosted machine) to execute the job

    strategy: # Define a strategy for running the job
      matrix: # Use a matrix to run the job in multiple environments
        node-version: [22] # Test on multiple Node.js versions

    environment: MONGO_URI # Define the environment variable for MongoDB connection

    steps: # Define the sequence of steps to be executed in this job
      - name: Checkout Code
        uses: actions/checkout@v3 # Clone the repository code to the runner

      #  Step 4: Set Up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3 # Use the setup-node action to configure Node.js
        with:
          node-version: ${{ matrix.node-version }} # Use the Node.js version specified in the matrix

      # Step 5: Print Environment Secrets
      - name: Print Env Secret
        env: # Define environment variables for this step
          MONGO_URI: ${{ secrets.MONGO_URI }} # MongoDB
          JWT_SECRET: ${{ secrets.JWT_SECRET }} # JWT authentication secret
          PORT: ${{ secrets.PORT }} # Application port
        run: | # Run multiple shell commands
          echo "Secret 1 is: $MONGO_URI"  
          echo "Secret 2 is: $JWT_SECRET"
          echo "Secret 3 is: $PORT"

      # Step 6: Stop Running Services in AWS
      - run: pm2 stop all # Stop all running PM2-managed processes in AWS, ensures that old processes are stopped before restarting.

      # Step 7: Install Backend Dependencies
      - name: Install Backend Dependencies
        working-directory: ./backend # Navigate to backend folder
        run: | # Run multiple commands
          npm install --global yarn 
          yarn --version
          yarn install

      # Step 8: Install Frontend Dependencies and Build
      - name: Install Frontend Dependencies
        working-directory: ./frontend # Navigate to frontend folder
        run: | # Run multiple commands
          df -h
          sudo rm -rf ./build  
          yarn install
          yarn run build

      # Step 9: Run Backend Tests
      - name: Run Backend Tests
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }} # MongoDB connection string
          JWT_SECRET: ${{ secrets.JWT_SECRET }} # JWT authentication secret
          PORT: ${{ secrets.PORT }} # Application port
        working-directory: ./backend
        run: npm test

      # Step 10: Install Dependencies Using npm ci
      - run: npm ci # Install dependencies using npm clean install

      # Step 11: Create .env File and Add Secrets for Production in AWS
      - run: | # Run multiple commands
          cd ./backend 
          touch .env
          echo "${{ secrets.PROD }}" > .env

      # Step 12: Start Frontend & Backend in AWS
      - name: Start Frontend & Backend in AWS
        run: |
          cd ./backend
          pm2 start server.js --name "backend"
          cd ../frontend
          pm2 serve ./build 3000 --name "frontend" --spa
          pm2 save

      # Step 12: Restart All Services in AWS
      - run: pm2 restart all

      # # Step 12: Start and Restart Services in AWS
      # - run: pm2 start all

      # - run: pm2 restart all
